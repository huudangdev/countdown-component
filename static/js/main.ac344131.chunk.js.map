{"version":3,"sources":["components/SVGCircle.js","components/Countdown.js","App.js","serviceWorker.js","index.js"],"names":["SVGCircle","_ref","radius","react_default","a","createElement","className","fill","stroke","stroke-width","d","describeArc","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","mapNumber","number","in_min","in_max","out_min","out_max","Countdown","props","_useState","useState","undefined","_useState2","Object","slicedToArray","days","setDays","_useState3","_useState4","hours","setHours","_useState5","_useState6","minutes","setMinutes","_useState7","_useState8","seconds","setSeconds","useEffect","interval","setInterval","timeTillDate","timeFormat","then","moment","now","countdown","format","clearInterval","daysRadius","hoursRadius","minutesRadius","secondsRadius","SVGCircle_SVGCircle","App","Fragment","components_Countdown","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wLAEaA,EAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,QACIE,KAAK,OACLC,OAAO,OACPC,eAAa,IACbC,EAAGC,EAAY,GAAI,GAAI,GAAI,EAAGT,OAM1C,SAASU,EAAiBC,EAASC,EAASZ,EAAQa,GAChD,IAAIC,GAAmBD,EAAiB,IAAME,KAAKC,GAAM,IAEzD,MAAO,CACHC,EAAGN,EAAUX,EAASe,KAAKG,IAAIJ,GAC/BK,EAAGP,EAAUZ,EAASe,KAAKK,IAAIN,IAIvC,SAASL,EAAYQ,EAAGE,EAAGnB,EAAQqB,EAAYC,GAC3C,IAAIC,EAAQb,EAAiBO,EAAGE,EAAGnB,EAAQsB,GACvCE,EAAMd,EAAiBO,EAAGE,EAAGnB,EAAQqB,GAErCI,EAAeH,EAAWD,GAAc,IAAM,IAAM,IAgBxD,MAdQ,CACJ,IACAE,EAAMN,EACNM,EAAMJ,EACN,IACAnB,EACAA,EACA,EACAyB,EACA,EACAD,EAAIP,EACJO,EAAIL,GACNO,KAAK,KAMJ,IAAMC,EAAY,SAACC,EAAQC,EAAQC,EAAQC,EAASC,GACvD,OACMJ,EAASC,IAAWG,EAAUD,IAAaD,EAASD,GAAUE,GC2BzDE,EAvEG,SAACC,GAAU,IAAAC,EACDC,wBAASC,GADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAClBM,EADkBH,EAAA,GACZI,EADYJ,EAAA,GAAAK,EAECP,wBAASC,GAFVO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElBE,EAFkBD,EAAA,GAEXE,EAFWF,EAAA,GAAAG,EAGKX,wBAASC,GAHdW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGlBE,EAHkBD,EAAA,GAGTE,EAHSF,EAAA,GAAAG,EAIKf,wBAASC,GAJde,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIlBE,EAJkBD,EAAA,GAITE,EAJSF,EAAA,GAMzBG,oBAAU,WACN,IAAIC,EAAWC,YAAY,WAAM,IACrBC,EAA6BxB,EAA7BwB,aAAcC,EAAezB,EAAfyB,WAChBC,EAAOC,IAAOH,EAAcC,GAC5BG,EAAMD,MACNE,EAAYF,IAAOD,EAAOE,GAC1BrB,EAAOsB,EAAUC,OAAO,KACxBnB,EAAQkB,EAAUC,OAAO,MACzBf,EAAUc,EAAUC,OAAO,MAC3BX,EAAUU,EAAUC,OAAO,MAEjCtB,EAAQD,GACRK,EAASD,GACTK,EAAWD,GACXK,EAAWD,IACZ,KACH,OAAO,kBAAMY,cAAcT,KAC5B,IAEH,IAAMU,EAAavC,EAAUc,EAAM,GAAI,EAAG,EAAG,KACvC0B,EAAcxC,EAAUkB,EAAO,GAAI,EAAG,EAAG,KACzCuB,EAAgBzC,EAAUsB,EAAS,GAAI,EAAG,EAAG,KAC7CoB,EAAgB1C,EAAU0B,EAAS,GAAI,EAAG,EAAG,KAEnD,OAAKA,EAKDpD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACVqC,GACGxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACmE,EAAD,CAAWtE,OAAQkE,IAClBzB,EACDxC,EAAAC,EAAAC,cAAA,qBAGP0C,GACG5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACmE,EAAD,CAAWtE,OAAQmE,IAClBtB,EACD5C,EAAAC,EAAAC,cAAA,sBAGP8C,GACGhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACmE,EAAD,CAAWtE,OAAQoE,IAClBnB,EACDhD,EAAAC,EAAAC,cAAA,wBAGPkD,GACGpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACmE,EAAD,CAAWtE,OAAQqE,IAClBhB,EACDpD,EAAAC,EAAAC,cAAA,0BAhCT,MCxBAoE,EARH,WACV,OACEtE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsE,SAAA,KACEvE,EAAAC,EAAAC,cAACsE,EAAD,CAAWf,aAAa,sBAAsBC,WAAW,yBCK3Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.ac344131.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SVGCircle = ({ radius }) => (\n    <svg className=\"countdown-svg\">\n        <path\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"4\"\n            d={describeArc(50, 50, 48, 0, radius)}\n        />\n    </svg>\n);\n\n// From StackOverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n    };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n    var d = [\n        'M',\n        start.x,\n        start.y,\n        'A',\n        radius,\n        radius,\n        0,\n        largeArcFlag,\n        0,\n        end.x,\n        end.y\n    ].join(' ');\n\n    return d;\n}\n\n// From StackOverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nexport const mapNumber = (number, in_min, in_max, out_min, out_max) => {\n    return (\n        ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport moment from 'moment';\n\nimport {mapNumber, SVGCircle} from './SVGCircle'\n\nconst Countdown = (props) => {\n    const [days, setDays] = useState(undefined);\n    const [hours, setHours] = useState(undefined);\n    const [minutes, setMinutes] = useState(undefined);\n    const [seconds, setSeconds] = useState(undefined);\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            const { timeTillDate, timeFormat } = props;\n            const then = moment(timeTillDate, timeFormat);\n            const now = moment();\n            const countdown = moment(then - now);\n            const days = countdown.format('D');\n            const hours = countdown.format('HH');\n            const minutes = countdown.format('mm');\n            const seconds = countdown.format('ss');\n\n            setDays(days);\n            setHours(hours);\n            setMinutes(minutes);\n            setSeconds(seconds);\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [])\n\n    const daysRadius = mapNumber(days, 30, 0, 0, 360);\n    const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n    const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n    const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n    if (!seconds) {\n        return null;\n    }\n\n    return (\n        <div>\n            <h1>Countdown-Component</h1>\n            <div className='countdown-wrapper'>\n                {days && (\n                    <div className='countdown-item'>\n                        <SVGCircle radius={daysRadius}/>\n                        {days}\n                        <span>days</span>\n                    </div>\n                )}\n                {hours && (\n                    <div className=\"countdown-item\">\n                        <SVGCircle radius={hoursRadius}/>\n                        {hours}\n                        <span>hours</span>\n                    </div>\n                )}\n                {minutes && (\n                    <div className=\"countdown-item\">\n                        <SVGCircle radius={minutesRadius}/>\n                        {minutes}\n                        <span>minutes</span>\n                    </div>\n                )}\n                {seconds && (\n                    <div className=\"countdown-item\">\n                        <SVGCircle radius={secondsRadius}/>\n                        {seconds}\n                        <span>seconds</span>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport Countdown from './components/Countdown'\n\nconst App = () => {\n  return (\n    <>\n      <Countdown timeTillDate='07 27 2019, 5:00 pm' timeFormat='MM DD YYYY, h:mm a'/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}